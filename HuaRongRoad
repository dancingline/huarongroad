
import java.awt.Button;
import java.awt.Font;
import java.awt.Frame;
import java.awt.Label;
import java.awt.Rectangle;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;

import javax.swing.BorderFactory;
import javax.swing.JOptionPane;

public class HuaRongRoad extends Frame implements MouseListener,ActionListener
{
	 Person person[] = new Person[10];	//十个人物
	 Button left,right,above,below;		//边界
	 Button restart = new Button("重新开始");//重新开始按钮
	 Button start = new Button("暂停");		//暂停按钮
	 Button goback = new Button("重新选关");	//重新选关
	 Label label = new Label ("05:00");		//显示时间
	 Timer timer = new Timer (label, this, 300100);//设置倒计时
	 Pause pause = new Pause (timer, start, this); //实现暂停
	 Return re = new Return (this);		//返回主界面
	 String name;		//当前关卡名
	 Person cur;		//记录当前人物
	 int choice=1;		//选择游戏模式
	 int posx, posy;	//当前人物坐标
	 boolean canMove;	//人物是否能移动
	 
	 public HuaRongRoad(){}
	 public HuaRongRoad(int choice, String name)                       
	 {
		  this.choice = choice;
		  this.name = name;
		  init();
		  setTitle(name);
		  setBounds(100,100,320,440);
		  timer.start();
		  setVisible(true);
		  //setResizable(false);
		  validate();
		  addWindowListener( new WindowAdapter(){
		         public void windowClosing(WindowEvent e)
		         {
		             System.exit(0);
		         }
		     }
		  );
	 }
	 public void init()
	 {
		  setLayout(null);
		  
		  add(restart);
		  restart.setBounds(100,320,120,25);
		  restart.addActionListener(this);

		  add(start);
		  start.setBounds(160, 360, 100, 25);
		  start.addActionListener(pause);
		  
		  add(label);
		  label.setBounds(60, 360, 50, 30);
		  Font font = new Font("微软雅黑", Font.BOLD, 14);
		  label.setFont(font);
		  
		  add (goback);
		  goback.setBounds(100, 400, 120, 25);
		  goback.addActionListener(re);
		  
		  canMove = true;
		  String name[] = {"曹操","关羽","张飞","刘备","赵云","黄忠","兵","兵","兵","兵"};
		  for(int k = 0;k<name.length;k++)
		  {
			   person[k] = new Person(k,name[k]);
			   person[k].addMouseListener(this);
			   add(person[k]);
		  }
		  
		  setCharactor();//根据选择设置人物布局 
			  
	//	  person[9].requestFocus();
		  left = new Button();
		  right = new Button();
		  above = new Button();
		  below = new Button();
		  add(left);
		  add(right);
		  add(above);
		  add(below);
		  left.setBounds(49,49,5,260);
		  right.setBounds(254,49,5,260);
		  above.setBounds(49,49,210,5);
		  below.setBounds(49,304,210,5);
		  validate();
	}
 /*public void keyTyped(KeyEvent e){}
 public void keyReleased(KeyEvent e){}
 public void keyPressed(KeyEvent e)
 {
  Person man = (Person)e.getSource();
  if(e.getKeyCode()==KeyEvent.VK_DOWN)
  {
   go(man,below);                          
  }
  if(e.getKeyCode()==KeyEvent.VK_UP)
  {
   go(man,above);
  }
  if(e.getKeyCode()==KeyEvent.VK_LEFT)
  {
   go(man,left);
  }
  if(e.getKeyCode()==KeyEvent.VK_RIGHT)
  {
   go(man,right);
  }
 }*/
	 public void setCharactor() {
		 if(choice == 1){
			  person[0].setBounds(104,54,100,100);
			  person[1].setBounds(104,154,100,50);
			  person[2].setBounds(54,154,50,100);
			  person[3].setBounds(204,154,50,100);
			  person[4].setBounds(54,54,50,100);
			  person[5].setBounds(204,54,50,100);
			  person[6].setBounds(54,254,50,50);
			  person[7].setBounds(204,254,50,50);
			  person[8].setBounds(104,204,50,50);
			  person[9].setBounds(154,204,50,50);
		  }
		  else if(choice == 2){
			  person[0].setBounds(104,54,100,100);
			  person[1].setBounds(104,204,100,50);
			  person[2].setBounds(54,204,50,100);
			  person[3].setBounds(204,204,50,100);
			  person[4].setBounds(54,54,50,100);
			  person[5].setBounds(54,154,100,50);
			  person[6].setBounds(154,154,50,50);
			  person[7].setBounds(204,154,50,50);
			  person[8].setBounds(204,54,50,50);
			  person[9].setBounds(204,104,50,50);
		  }
		  else if(choice == 3){
			  person[0].setBounds(54,54,100,100);
			  person[1].setBounds(154,54,50,100);
			  person[2].setBounds(204,54,50,100);
			  person[3].setBounds(54,154,100,50);
			  person[4].setBounds(54,204,50,100);
			  person[5].setBounds(104,204,50,100);
			  person[6].setBounds(154,154,50,50);
			  person[7].setBounds(204,154,50,50);
			  person[8].setBounds(154,204,50,50);
			  person[9].setBounds(204,204,50,50);
		  }
	 }
	 public void mousePressed(MouseEvent e)
	 {
		  cur = (Person)e.getSource();
		  posx = -1;
		  posy = -1;
		  posx = e.getX();
		  posy = e.getY();
	 }
	 public void mouseReleased(MouseEvent e){
		  int x = -1,y = -1;
		  x = e.getX();
		  y = e.getY();
		  if (x-posx>Math.abs(y-posy))
			  go (cur, right);
		  else if (posx-x>Math.abs(y-posy))
			  go (cur, left);
		  else if (posy-y>Math.abs(x-posx))
			  go (cur, above);
		  else if (y-posy>Math.abs(x-posx))
			  go (cur, below);
	 }
	 public void mouseEntered(MouseEvent e){}
	 public void mouseExited(MouseEvent e){}
	 public void mouseClicked(MouseEvent e){}
	 public void go(Person man,Button direction)
	 {
		  boolean move = true;
		  if (!canMove) return;
		  Rectangle manRect = man.getBounds();               
		  int x = man.getBounds().x;                         
		  int y = man.getBounds().y;
		  if(direction==below)
		  {
			  y = y+50;
		  }
		  else if(direction==above)
		  {
			  y = y-50;
		  }
		  else if(direction==left)
		  {
			  x = x-50;
		  }
		  else if(direction==right)
		  {
			  x = x+50;
		  }
		  manRect.setLocation(x,y);
		  Rectangle directionRect = direction.getBounds();
		  for(int k = 0;k<10;k++)
		  {
			   Rectangle personRect = person[k].getBounds();
			   if((manRect.intersects(personRect))&&(man.number!=k))
			   {
			    move = false;
			   }
		  }
		  if(manRect.intersects(directionRect))
		  {
			  move = false;
		  }
		  if(move==true)
		  {
			   man.setLocation(x,y);
			   if (man.getLabel()=="曹操" && man.getBounds().y==204 && man.getBounds().x == 104)
			   {
				   timer.setStopped(true);
				   start.removeActionListener(pause);
				   JOptionPane.showMessageDialog(new JOptionPane(), "你赢了！", "",0);
				   
				   //pause.actionPerformed(null);
				   canMove = false;

			   }
				    
		  }
	 }
	 public void actionPerformed(ActionEvent e)
	 {
		  timer.setStopped(true);
		  dispose();
		  new HuaRongRoad(choice, name);
	 }
}
